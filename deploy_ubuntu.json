{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "UserName": {
            "type": "string",
            "metadata": {
                "description": "Specifies a name for generating resource names."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Specifies the location for all resources."
            }
        },
        "adminUsername": {
            "type": "string",
            "defaultValue": "inteladmin",
            "metadata": {
                "description": "Specifies a username for the Virtual Machine."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "defaultValue": "lalala"
        },
        "adminPublicKey": {
            "type": "string",
            "defaultValue": "somth",
            "metadata": {
                "description": "Specifies the SSH rsa public key file as a string. Use \"ssh-keygen -t rsa -b 2048\" to generate your SSH key pairs."
            }
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_D2s_v4",
            "metadata": {
                "description": "description"
            }
        },
        "diskencsetName": {
            "type": "string",
            "defaultValue": "[concat(parameters('UserName'),'-disk-enc-set')]",
            "metadata": {
                "description": "specifies the disk encryption name"
            }
        },
        "keyVaultName": {
            "type": "string",
            "defaultValue": "[concat(parameters('UserName'),'-vm')]",
            "metadata": {
                "description": "Specifies the name of the key vault."
            }
        },
        "enabledForDeployment": {
            "type": "bool",
            "defaultValue": true,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
            }
        },
        "enabledForDiskEncryption": {
            "type": "bool",
            "defaultValue": true,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
            }
        },
        "enabledForTemplateDeployment": {
            "type": "bool",
            "defaultValue": true,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
            }
        },
        "tenantId": {
            "type": "string",
            "defaultValue": "[subscription().tenantId]",
            "metadata": {
                "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
            }
        },
        "objectId": {
            "type": "string",
            "defaultValue": "124fee5f-ca44-4683-9c61-90020c4f4abc",
            "metadata": {
                "description": "Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets."
            }
        },
        "keysPermissions": {
            "type": "array",
            "defaultValue": [
                "list",
                "get",
                "create",
                "update",
                "wrapKey",
                "unwrapKey"
            ],
            "metadata": {
                "description": "Specifies the permissions to keys in the vault. Valid values are: all, encrypt, decrypt, wrapKey, unwrapKey, sign, verify, get, list, create, update, import, delete, backup, restore, recover, and purge."
            }
        },
        "keySize": {
            "type": "int",
            "defaultValue": 2048,
            "metadata": {
                "description": "The key size in bits. For example: 2048, 3072, or 4096 for RSA."
            }
        },
        "kty": {
            "type": "string",
            "defaultValue": "RSA",
            "metadata": {
                "description": "The type of the key EC or RSA "
            }
        },
        "keyOps": {
            "type": "array",
            "defaultValue": [ "decrypt", "encrypt", "sign", "wrapKey", "unwrapKey" ],
            "metadata": {
                "description": "key Permited Operations "
            }
        },
        "secretsPermissions": {
            "type": "array",
            "defaultValue": [
                "list",
                "get",
                "set"
            ],
            "metadata": {
                "description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
            }
        },
        "skuName": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Standard",
                "Premium"
            ],
            "metadata": {
                "description": "Specifies whether the key vault is a standard vault or a premium vault."
            }
        },
        "secretName": {
            "type": "string",
            "defaultValue": "encryptionkey",
            "metadata": {
                "description": "Specifies the name of the secret that you want to create."
            }
        },
        "resourceTags": {
            "type": "object",
            "defaultValue": {
                "Environment": "Prod",
                "IAP": "19716"
            }
        },
        "ownerEmail": {
            "type": "string",
            "defaultValue": "laasadmins@intel.com",
            "metadata": {
                "description": "Owner Email."
            }
        },

      "ubuntuOSVersion": {
      "type": "string",
      "defaultValue": "18.04-LTS",
      "allowedValues": [
        "12.04.5-LTS",
        "14.04.5-LTS",
        "16.04.0-LTS",
        "18.04-LTS"
      ],
      "metadata": {
        "description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version."
      }
    },
        "softDeleteRetentionInDays": {
            "type": "int",
            "defaultValue": 7,
            "maxValue": 90,
            "metadata": {
                "description": "softDelete data retention days, only used if enableSoftDelete is true. It accepts >=7 and <=90."
            }
        }
        //       "secretValue": {
        //        "type": "securestring",
        //        "metadata": {
        //            "description": "Specifies the value of the secret that you want to create."
        //        }
        //        }

    },
    "variables": {
        "subnetId": "/subscriptions/0ff29502-cc4e-41c7-9010-c6e9f068839f/resourceGroups/nzarhin/providers/Microsoft.Network/virtualNetworks/LaaS_Aquarius_HybridCloud_Network/subnets/Laas_Aquarius_US_West2_Subnet",
        "vmName": "[concat(parameters('UserName'), '-vm')]",
        "networkInterfaceName": "[concat(parameters('UserName'), '-nic')]",
        "networkSecurityGroupName": "/subscriptions/0ff29502-cc4e-41c7-9010-c6e9f068839f/resourceGroups/nzarhin/providers/Microsoft.Network/networkSecurityGroups/Laas_Aquarius_US_West2_Subnet-nsg",
        "customTag": { "ownerEmail": "[parameters('ownerEmail')]" },
        "base64UserName": "[base64(parameters('UserName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2020-05-01",
            "name": "[variables('networkInterfaceName')]",
            "location": "[parameters('location')]",
            "tags": "[union(parameters('resourceTags'),variables('customTag'))]",
            "dependsOn": [
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('subnetId')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[variables('networkSecurityGroupName')]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/disks",
            "apiVersion": "2018-06-01",
            "name": "[concat(variables('vmName'),'-data-0')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskencsetName'))]",
                "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', parameters('keyVaultName'), 'add')]"
            ],
            "sku": {
                "name": "Premium_LRS"
            },
            "properties": {
                "creationData": {
                    "createOption": "Empty"
                },
                "diskSizeGB": 128
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2021-03-01",
            "name": "[variables('vmName')]",
            "location": "[parameters('location')]",
            "tags": "[union(parameters('resourceTags'),variables('customTag'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]",
                "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskencsetName'))]",
                "[resourceId('Microsoft.Compute/disks/', concat(variables('vmName'),'-data-0'))]",
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', parameters('keyVaultName'), 'add')]"
                



            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[variables('vmName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": false
                        // "ssh": {
                        //  "publicKeys": [
                        //      {
                        //          "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                        //          "keyData": "[parameters('adminPublicKey')]"
                        //      }
                        //   ]
                        //  }
                    }
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true
                    }
                },
                "storageProfile": {
                    "imageReference": {
                        //"id": "[resourceId('Microsoft.Compute/galleries/images/versions', parameters('galleryName'), parameters('galleryImageDefinitionName'), parameters('galleryImageVersionName'))]"
                        "publisher": "Canonical",
                        "offer": "UbuntuServer",
                        "sku": "[parameters('ubuntuOSVersion')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        // "diffDiskSettings": {
                        //     "option": "Local"
                        // },
                        "name": "[concat(variables('vmName'),'-','osdisk')]",
                        "createOption": "FromImage",
                        "caching": "ReadWrite",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS",
                            "diskEncryptionSet": {
                                "id": "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskencsetName'))]"
                            }
                        }
                        // "encryptionSettings": {
                        //     "enabled": true
                        // }
                    },
                    "dataDisks": [
                        {
                            "name": "[concat(variables('vmName'),'-data-0')]",
                            "createOption": "attach",
                            "caching": "ReadWrite",
                            "lun": 0,
                            "managedDisk": {
                                "id": "[resourceId('Microsoft.Compute/disks/', concat(variables('vmName'),'-data-0'))]",
                                "diskEncryptionSet": {
                                    "id": "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskencsetName'))]"
                                }
                            }
                        }
                    ]
                },
                "userData": "[variables('base64UserName')]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2019-09-01",
            "name": "[parameters('keyVaultName')]",
            "tags": "[union(parameters('resourceTags'),variables('customTag'))]",
            "location": "[parameters('location')]",
            "dependsOn": [
            ],
            "properties": {
                "enabledForDeployment": "[parameters('enabledForDeployment')]",
                "enablePurgeProtection": true,
                "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
                "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
                "enableSoftDelete": true,
                "tenantId": "[parameters('tenantId')]",
                "accessPolicies": [
                    {
                        "objectId": "[parameters('objectId')]",
                        "tenantId": "[parameters('tenantId')]",
                        "permissions": {
                            "keys": "[parameters('keysPermissions')]",
                            "secrets": "[parameters('secretsPermissions')]"
                        }
                    }
                ],
                "sku": {
                    "name": "[parameters('skuName')]",
                    "family": "A"
                },
                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                "publicNetworkAccess": "disabled",
                "networkAcls": {
                    "defaultAction": "Deny",
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [
                        {
                            "id": "[variables('subnetId')]"
                        }
                    ],
                    "ipRules": [
                        {
                            "value": "192.55.79.160/27"
                        },
                        {
                            "value": "198.175.68.32/27"
                        },
                        {
                            "value": "192.55.54.32/27"
                        },
                        {
                            "value": "192.55.55.32/27"
                        },
                        {
                            "value": "134.191.232.64/27"
                        },
                        {
                            "value": "134.191.233.192/27"
                        },
                        {
                            "value": "192.198.151.32/27"
                        },
                        {
                            "value": "134.191.227.32/27"
                        },
                        {
                            "value": "134.134.139.64/27"
                        },
                        {
                            "value": "134.134.137.64/27"
                        },
                        {
                            "value": "134.191.220.64/27"
                        },
                        {
                            "value": "134.191.221.64/27"
                        },
                        {
                            "value": "192.198.146.160/27"
                        },
                        {
                            "value": "192.198.147.160/27"
                        },
                        {
                            "value": "192.102.204.32/27"
                        },
                        {
                            "value": "192.55.46.32/27"
                        },
                        {
                            "value": "134.134.136.192/27"
                        },
                        {
                            "value": "192.55.52.192/27"
                        },
                        {
                            "value": "192.55.79.96/27"
                        },
                        {
                            "value": "134.191.233.96/27"
                        },
                        {
                            "value": "192.198.151.160/27"
                        },
                        {
                            "value": "134.191.221.96/27"
                        },
                        {
                            "value": "192.198.147.192/27"
                        },
                        {
                            "value": "52.160.92.112"
                        },
                        {
                            "value": "40.118.244.241"
                        },
                        {
                            "value": "40.118.241.243"
                        },
                        {
                            "value": "157.56.162.53"
                        },
                        {
                            "value": "104.42.49.145"
                        },
                        {
                            "value": "40.83.164.80"
                        },
                        {
                            "value": "104.42.38.32"
                        },
                        {
                            "value": "13.86.223.0"
                        },
                        {
                            "value": "13.86.223.1"
                        },
                        {
                            "value": "13.86.223.2"
                        },
                        {
                            "value": "13.86.223.3"
                        },
                        {
                            "value": "13.86.223.4"
                        },
                        {
                            "value": "13.86.223.5"
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/keys",
            "apiVersion": "2019-09-01",
            "name": "[concat(parameters('keyVaultName'), '/', parameters('secretName'))]",
            "tags": "[union(parameters('resourceTags'),variables('customTag'))]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            ],
            "properties": {
                "keyOps": "[parameters('keyOps') ]",
                "keySize": "[parameters('keySize')]",
                "kty": "[parameters('kty')]"
            }
        },
        {
            // creating the disk encryption set
            "type": "Microsoft.Compute/diskEncryptionSets",
            "apiVersion": "2019-07-01",
            "name": "[parameters('diskencsetName')]",
            "location": "[resourceGroup().location]",
            "tags": "[union(parameters('resourceTags'),variables('customTag'))]",
            "dependsOn": [
                // this depends on the key existing
                "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('secretName'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                // since I know the key and vault exists, I can refer to them via the reference() and referenceId() functions below
                "activeKey": {
                    "sourceVault": {
                        "id": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                    },
                    // I found the API from the key API
                    "keyUrl": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('secretName')), '2019-09-01', 'Full').properties.keyUriWithVersion]"
                }
            }
        },
        {
            // now I define the access policies to the key vault
            "type": "Microsoft.KeyVault/vaults/accessPolicies",
            "apiVersion": "2019-09-01",
            "name": "[concat(parameters('keyVaultName'), '/add')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskencsetName'))]"
            ],
            "properties": {
                "accessPolicies": [
                    {
                        "tenantId": "[subscription().tenantId]",
                        // again, thanks to the reference() function I can get the principal id of the disk encryption set! 
                        "objectId": "[reference(resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskencsetName')), '2019-07-01', 'Full').identity.PrincipalId]",
                        "permissions": {
                            "keys": [
                                "Get",
                                "WrapKey",
                                "UnwrapKey"
                            ],
                            "secrets": [],
                            "certificates": []
                        }
                    }
                ]
            }
        }

        //            {
        //            "type": "Microsoft.KeyVault/vaults/secrets",
        //            "apiVersion": "2019-09-01",
        //            "name": "[concat(parameters('keyVaultName'), '/', parameters('secretName'))]",
        //           "location": "[parameters('location')]",
        //          "dependsOn": [
        //               "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
        //            ],
        //           "properties": {
        //                "contentType": "string",
        //                "value": "[parameters('secretValue')]"
        //            }
        //    }
    ],
    "outputs": {
        "vmIPaddress": {
            "type": "string",
            "value": "[reference(variables('networkInterfaceName')).ipConfigurations[0].properties.privateIPAddress]"
        }
    }
}
